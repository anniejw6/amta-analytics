{
    "contents" : "---\ntitle: \"Round Pairing\"\nauthor: \"ajw\"\noutput:\n  html_document:\n    css: markdown7.css\n---\n\n# Set-up\nSet the round that you are pairing.\n```{r}\nround <- 4\n```\n\nThis runs the backing functions, which can be found [an example](http://example.com/ \"Title\").\n```{r,warning = F, message = F}\nsource('pair_func.R')\n```\n\nRead in data from google sheets.\n```{r}\nteams <- 'https://docs.google.com/spreadsheets/d/1REb82IzLPC3S7n93CntfAaqBETdSCDXoO6DKS9VV0ro/pubhtml?gid=0&single=true'\ntab   <- 'https://docs.google.com/spreadsheets/d/1REb82IzLPC3S7n93CntfAaqBETdSCDXoO6DKS9VV0ro/pubhtml?gid=2080568749&single=true'\n\nteams <- readSpreadsheet(teams)\ndf <- cleanTab(readSpreadsheet(tab))\n\ntab <- data.frame(\n  team = df$TEAM,\n  side = df[[paste0('R', round - 1, '_SIDE')]],\n  wpb  = as.numeric(df[[paste0('R', round - 1, '_RT_WPB')]]),\n  pb   = as.numeric(df[[paste0('R', round - 1, '_RT_PB')]]),\n  pd   = as.numeric(df[[paste0('R', round - 1, '_RT_PD')]]),\n  stringsAsFactors = F\n)\n\ntab$rank <- rankWPB(wpb = 'wpb',\n                    pb  = 'pb',\n                    pd  = 'pd', dat = tab, r = round)\n```\n\n`teams` lists out past pairings, which are used to check impermissibles.\n```{r, echo = F, results='asis'}\nprintTab(xtable(head(teams)))\n```\n\n`tab` shows the values on which we pair.\n```{r, echo = F, results='asis'}\nprintTab(xtable(head(tab)))\n```\n\n# Defining Impermissibles\nWe store a list of impermissible match-ups, which are \ndefined either as teams from the same school or teams that have previously faced one another.\nHere's a sample of that list.\n```{r, echo = F, results='asis'}\nimpermiss <- rbind(sameSchool(teams),\n                   pastOpp(df, round))\nprintTab(xtable(head(impermiss)))\n```\n\n# Pairing\n\nNow we pair the teams. If the round is side-constrained, we rank and pair by sides. Otherwise, we take all the teams togther.\n```{r}\npair <- data.frame(P_team = rep(NA, nrow(df)/2),\n                   D_team = NA)\n\n#if round is side-constrained:\nif(round %in% c(2,4)){\n  \n  #rank sides separately\n  needP <- tab[tab$side == 'D', ]\n  needD <- tab[tab$side == 'P', ]\n  \n  #pair highest versus highest\n  pair <- teamMeta(pair, needP[order(needP$rank), ], side = 'P', round = round)\n  pair <- teamMeta(pair, needD[order(needD$rank), ], side = 'D', round = round)\n  \n} else {\n  \n  #rank teams together\n  tab <- tab[order(tab$rank), ]\n  \n  #pair 1 vs 2, 3 vs 4, etc\n  pair <- teamMeta(pair, tab[c(T, F), ], side = 'P', round = round)\n  pair <- teamMeta(pair, tab[c(F, T), ], side = 'D', round = round)\n  \n}\n```\n\nHere's the pairings, which may or may not include impermissibles.\n```{r, echo = F, results='asis'}\nprintTab(xtable(pair))\n```\n\n# Finding and Resolving Impermissibles\n\nWe loop through each row and see whether \nthe matchup is in the list of impermissibles we created earlier.\n```{r, echo = T, results='asis'}\n# Find impermissibles\npair$impermiss <- findImpermiss(pair, impermiss)\n\n# Set value to store swaps\nswaps <- data.frame(Team1 = NA, Team2 = NA, final = NA)\n```\n\nAnd then we actually try to resolve them.\n```{r impermiss, results = 'asis'}\nif(sum(pair$impermiss) == 0){\n  \n  writeLines('No impermissibles!')\n  \n} else {\n  \n  # resolve impermissibles\n  while (sum(pair$impermiss) > 0){\n  \n    writeLines('Current List of Pairings')\n    printTab(xtable(addColor(pair)))\n    \n    # Order trials by rank\n    pair <- pair[order(pair$P_rank + pair$D_rank), ]\n    \n    # set trial_x = highest trial with impermissible\n    trial_x <- pair[min(which(pair$impermiss == T)), ]\n    \n    # Compare swap distances based on WPB, PB, and PD\n    possSwaps <- compareDist(all = tab, x = trial_x, round = round)  \n    \n    repeat{\n      \n      # Set proposed_swap = minimum distance swap\n      proposedSwap <- possSwaps[1, ]\n      \n      writeLines('Proposed Swap')\n      printTab(xtable(proposedSwap))\n      \n      # If it's allowed\n      if(!paste0(proposedSwap$p, proposedSwap$d) %in% swaps$final){\n        break\n        }\n      \n      # If it's not allowed, remove proposed_swap from possible\n      writeLines('Proposed swap is not possible!')\n      possSwaps <- possSwaps[-1, ]\n    }\n    \n    #  make proposed_swap\n    pair <- makeSwap(newSwap = proposedSwap, old = trial_x, dat = pair)\n    \n    #  insert proposed_swap in SWAP\n    swaps <- insertSwap(neW = proposedSwap, dat = swaps)\n    \n    #  set n = number of impermissibles\n    pair$impermiss <- findImpermiss(pair, impermiss)\n    }\n  }\n```\n\n# Final Pairings\n\nHere are final pairings, which are resolved for impermissibles.\n```{r, echo = F, results = 'asis'}\nprintTab(xtable(pair))\n```\n\n",
    "created" : 1412682780986.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1829477275",
    "id" : "EA265422",
    "lastKnownWriteTime" : 1412689529,
    "path" : "~/scratch/amta-pairing/pairing.Rmd",
    "project_path" : "pairing.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}