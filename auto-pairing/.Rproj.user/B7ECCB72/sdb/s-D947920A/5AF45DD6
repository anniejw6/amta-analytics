{
    "contents" : "library(XML)\nlibrary(httr)\nlibrary(plyr)\nlibrary(reshape)\nlibrary(knitr)\nlibrary(xtable)\nlibrary(pander)\n\n# Prints pretty things\nprintTab <- function(x){\n  print(x, type = 'html', include.rownames = F, \n        sanitize.text.function = force, \n        sanitize.rownames.function = NULL, \n        sanitize.colnames.function = NULL, \n        NA.string = NA.string)\n}\n\n# Adds color to impermissibles\naddColor <- function(x = pair){\n  x[x$impermiss == T, ] <- as.data.frame(lapply(x[x$impermiss == T,],\n                                                FUN = function(x) {paste0('<span style=\"color:red\">', x, '</span>')}),\n                                         stringsAsFactors = F)\n  return(x)\n}\n\n# Read from spreadsheet\nreadSpreadsheet <- function(url, sheet = 1){\n  r <- GET(url)\n  html <- content(r)\n  sheets <- readHTMLTable(html, header=FALSE, stringsAsFactors=FALSE)\n  df <- sheets[[sheet]]\n  dfClean <- function(df){\n    nms <- t(df[1,])\n    names(df) <- nms\n    df <- df[-1,-1] \n    row.names(df) <- seq(1,nrow(df))\n    df\n  }\n  dfClean(df)\n}\n\ncleanTab <- function(dat){\n  del <- c(paste0('S.', 1:3), '','S', 'CURRENT_WPB', 'CURRENT_RANK')\n  df <- dat[, !colnames(dat) %in% del]\n  df <- subset(df, TEAM != '')\n  df[df == '#N/A'] <- NA\n  df[df == 'NA'] <- NA\n  i <- sapply(df, is.factor)\n  df[i] <- lapply(df[i], as.character)\n  return(df)\n}\n\n# Create data-frame of impermissible based on same school\nsameSchool <- function(df){\n  teams <- subset(df, University %in% University[duplicated(University)])\n  x <- ddply(teams, .(University), function(x){\n    res <- t(combn(x[['Team Name']], 2))\n    oth <- res[, c(2, 1)]\n    res <- data.frame(rbind(res, oth))\n    return(res)\n  })\n  x$University <- NULL\n  colnames(x) <- c('Team1', 'Team2')\n  return(x)\n}\n\n# Create data-frame of impermissible based on past opponents\npastOpp <- function(df, round){\n  \n  # Opponents up to that round\n  impermiss <- df[, c('TEAM', paste0('R',1:(round - 1),'_OPP'))]\n  impermiss <- melt(impermiss, id = 'TEAM')\n  \n  # Get rid of random variable\n  impermiss$variable <- NULL\n  \n  # Subset to rounds that have been paired\n  impermiss <- subset(impermiss, !is.na(value))\n  \n  # Clean-up\n  colnames(impermiss) <- c('Team1', 'Team2')\n  \n  return(impermiss)\n}\n\n# rank teams by WPB, PB, PD, coin-flip\nrankWPB <- function(wpb, pb, pd, dat = tab, r = round){\n  \n  wpb <- dat[[wpb]]\n  pb <- dat[[pb]]\n  pd <- dat[[pd]]\n  \n  wpb[is.na(wpb)] <- 0\n  pb[is.na(pb)] <- 0\n  pd[is.na(pd)] <- 0\n  \n  return(rank(-1*as.numeric(\n    interaction(wpb, pb, pd, \n                drop = TRUE, lex.order = TRUE)))) \n}\n\n# Calculate distance by WPB, PB, PD\n# Returns \ncompareDist <- function(all = tab, x = trial_x, round = round){\n  \n  # Minor Cleaning\n  all[is.na(all)] <- 0\n  x[is.na(x)] <- 0\n  \n  # Create all possible matches \n  if(round %% 2 == 0){ # If round is side-constrained\n    # Compare against teams of the same side\n    dSwap <- data.frame(p = x$P_team,\n                        d = all$team[all$side == 'P'],\n                        dist_WPB = abs(all$wpb[all$side == 'P'] - x$D_WPB),\n                        dist_PB  = abs(all$pb[all$side == 'P'] - x$D_pb),\n                        dist_PD = abs(all$pd[all$side == 'P'] - x$D_pd),\n                        cat = 'Keep P, Swap D')\n    \n    pSwap <- data.frame(p = all$team[all$side == 'D'],\n                        d = x$D_team,\n                        dist_WPB = abs(all$wpb[all$side == 'D'] - x$P_WPB),\n                        dist_PB  = abs(all$pb[all$side == 'D'] - x$P_pb),\n                        dist_PD = abs(all$pd[all$side == 'D'] - x$P_pd),\n                        cat = 'Keep D, Swap P')\n  } else {\n    # Compare against all teams\n    dSwap <- data.frame(p = x$P_team,\n                        d = all$team,\n                        dist_WPB = abs(all$wpb - x$D_WPB),\n                        dist_PB  = abs(all$pb - x$D_pb),\n                        dist_PD = abs(all$pd - x$D_pd),\n                        cat = 'Keep P, Swap D')\n    \n    pSwap <- data.frame(p = all$team,\n                        d = x$D_team,\n                        dist_WPB = abs(all$wpb - x$P_WPB),\n                        dist_PB  = abs(all$pb - x$P_pb),\n                        dist_PD = abs(all$pd - x$P_pd),\n                        at = 'Keep D, Swap P')\n  }\n  x <- unique(rbind(dSwap, pSwap))\n  \n  # Sort by distance\n  x <- x[order(x$dist_WPB, x$dist_PB, x$dist_PD), ]\n  x <- subset(x, !(dist_WPB + dist_PB + dist_PD == 0)) # This is the no-swap option\n  \n  # Get rid of factors\n  i <- sapply(x, is.factor)\n  x[i] <- lapply(x[i], as.character)\n  \n  return(x)\n}\n\n\n# Function to add metadata after pairing\nteamMeta <- function(pair, input, side, round){\n  \n  pair[[paste0(side, '_team')]] <- as.character(input[, 1])\n  pair[[paste0(side, '_WPB')]] <- as.numeric(input[, 3])\n  pair[[paste0(side, '_pb')]] <- as.numeric(input[, 4])\n  pair[[paste0(side, '_pd')]] <- as.numeric(input[, 5])\n  if(round %% 2 == 0){\n    pair[[paste0(side, '_rank')]] <- 1:nrow(pair)\n  } else {\n    pair[[paste0(side, '_rank')]] <- as.numeric(input[, 6])\n  }\n  \n  return(pair)\n}\n\n# Find Impermissibles\nfindImpermiss <- function(dat = pair, impermissibles = impermiss){\n  \n  notOkay <- paste0(impermissibles[, 1], impermissibles[, 2])\n  \n  res <- rep(F, nrow(dat))\n  for(i in 1:nrow(dat)){\n    proposedPair <- paste0(dat$P_team[i], dat$D_team[i])\n    if(proposedPair %in% notOkay) res[i] <- T\n  }\n  return(res)\n}\n\n# Make proposed swap\nmakeSwap <- function(newSwap = proposedSwap, old = trial_x, dat = pair){\n  \n  swap <- function(side = 'P', dat = dat){\n    \n    var <- paste(side, c('WPB', 'pb', 'pd', 'rank'), sep = '_')\n    teamVar <- paste0(side, '_team')\n    \n    # Get row numbers\n    oldD <- which(dat[[teamVar]] == old[[teamVar]])\n    newD <- which(dat[[teamVar]] == newSwap[[tolower(side)]])\n    \n    #writeLines('\\nOriginal values\\n')\n    #printTab(xtable(dat[c(oldD, newD), ]))\n    \n    # Grab stats\n    oldStats <- dat[oldD, var]\n    newStats <- dat[newD, var]\n    \n    # Make the swap\n    dat[c(oldD, newD), teamVar] <- c(newSwap[[tolower(side)]], old[[teamVar]])\n    dat[c(oldD, newD), var] <- rbind(newStats, oldStats)\n    \n    #writeLines('\\nNew values\\n')\n    #printTab(xtable(dat[c(oldD, newD), ]))\n\n    return(dat)\n  }\n  \n  if(newSwap$p != old$P_team){\n    \n    #writeLines(paste('\\nSwapping Pros team', old$P_team, 'for', newSwap$p))\n    side = 'P'\n    \n  } else {\n    \n    #writeLines(paste('\\nSwapping Def team', old$D_team, 'for', newSwap$d))\n    side = 'D'\n    \n  }\n\n  return(swap(side = side, dat = dat))\n  \n}\n\n# Insert Swaps\ninsertSwap <- function(neW = proposedSwap, dat = swaps){\n  # Create out combinations\n  news <- data.frame(Team1 = c(neW$p, neW$d),\n                     Team2 = c(neW$d, neW$p),\n                     final = NA,\n                     stringsAsFactors = F)\n  # Add to existing\n  dat <- rbind(dat, news)\n  # Get rid of NAs\n  dat <- subset(dat, !is.na(Team1))\n  # Create concatenation\n  dat$final <- apply(dat, 1, function(x){\n    paste0(x[1], x[2])\n  })\n  return(dat)\n}",
    "created" : 1412681752079.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1769334108",
    "id" : "5AF45DD6",
    "lastKnownWriteTime" : 1412689424,
    "path" : "~/scratch/amta-pairing/pair_func.R",
    "project_path" : "pair_func.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}